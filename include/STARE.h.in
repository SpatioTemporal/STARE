/**
 * STARE.h
 *
 *  The API to the STARE index functions.
 *
 *  Created on: Jan 31, 2019
 *      Author: mrilee
 *
 *  Copyright (C) 2019 Rilee Systems Technologies LLC
 */

#ifndef INCLUDE_STARE_H_
#define INCLUDE_STARE_H_

#include "General.h"
#include "HstmRange.h"
#include "SpatialGeneral.h"
#include "SpatialIndex.h"
#include "SpatialRotation.h"
#include "EmbeddedLevelNameEncoding.h"
#include <map>
#include <vector>
#include <fstream>

#include "TemporalIndex.h"
#include "TemporalGeneral.h"

typedef int64_t STARE_ArrayIndexTemporalValue;
typedef std::vector<STARE_ArrayIndexTemporalValue> STARE_TemporalIntervals;
typedef std::vector<STARE_ArrayIndexTemporalValue> STARE_ArrayIndexTemporalValues;

#define STARE_VERSION "@VERSION@"

// TODO Consider index vs. array index vs. collections of the same & set logic.

/// A lightweight type for the STARE spatial index
typedef uint64 STARE_ArrayIndexSpatialValue;
typedef std::vector<STARE_ArrayIndexSpatialValue> STARE_SpatialIntervals;
typedef std::vector<STARE_ArrayIndexSpatialValue> STARE_ArrayIndexSpatialValues;
// struct LatLon   {float64 lat, lon;};
// typedef std::vector<SpatialVector> Vertices;
// struct Triangle {SpatialVector centroid;  Vertices vertices;};


/// TODO The following is a stopgap on the way to completely removing this hardcoded bit.
#define STARE_HARDWIRED_RESOLUTION_LEVEL_MAX 27
// < 2019-0919 #define STARE_HARDWIRED_BUILD_LEVEL_MAX       5
#define STARE_HARDWIRED_BUILD_LEVEL_MAX       5
// #define STARE_HARDWIRED_BUILD_LEVEL_MAX       7
// #define STARE_HARDWIRED_BUILD_LEVEL_MAX       8
// #define STARE_HARDWIRED_BUILD_LEVEL_MAX       10 bad alloc

class STARE {
public:
	STARE();
	STARE( int search_level, int build_level );
	STARE( int search_level, int build_level, SpatialRotation rotate_root_octahedron );
	virtual ~STARE();
	
	void defaultConfiguration();

	uint32 sSearchLevel() const; /// Location precision level in the sIndex.

	// Spatial array index functions. [Maybe change the name StareId to spatialStareId in the following...]
	STARE_ArrayIndexSpatialValue ValueFromLatLonDegrees(float64 latDegrees, float64 lonDegrees, int resolutionLevel = STARE_HARDWIRED_RESOLUTION_LEVEL_MAX);
	LatLonDegrees64 LatLonDegreesFromValue(STARE_ArrayIndexSpatialValue spatialStareId);
	SpatialVector SpatialVectorFromValue(STARE_ArrayIndexSpatialValue spatialStareId);
	STARE_ArrayIndexSpatialValue ValueFromSpatialVector(SpatialVector v, int resolution = -1);
	uint32 ResolutionLevelFromValue(STARE_ArrayIndexSpatialValue spatialStareId);

	Triangle TriangleFromValue(STARE_ArrayIndexSpatialValue spatialStareId, int resolutionLevel = -1);
	float64  AreaFromValue    (STARE_ArrayIndexSpatialValue spatialStareId, int resolutionLevel = -1);
	
	STARE_ArrayIndexSpatialValues toVertices(STARE_ArrayIndexSpatialValues spatialStareIds); 

	STARE_SpatialIntervals ConvexHull(LatLonDegrees64ValueVector points,int force_resolution_level);
	STARE_SpatialIntervals ConvexHull(STARE_ArrayIndexSpatialValues points,int force_resolution_level);

	SpatialIndex getIndex() { return sIndex; }
	SpatialIndex getIndex(int resolutionLevel);
	uint64       getMaximumSearchLevel() { return STARE_HARDWIRED_RESOLUTION_LEVEL_MAX; } // TODO Ugh. See search_level in the privates...
	uint64       getSearchLevel() { return this->search_level; } // TODO Ugh. See search_level in the privates...
	uint64       getBuildLevel()  { return this->build_level; }
	SpatialRotation getRotation() { return this->rotate_root_octahedron; }

	STARE_SpatialIntervals CoverBoundingBoxFromLatLonDegrees(LatLonDegrees64ValueVector corners, int force_resolution_level = -1);
	STARE_SpatialIntervals CoverCircleFromLatLonRadiusDegrees(float64 latDegrees, float64 lonDegrees, float64 radius_degrees, int force_resolution_level = -1);

	STARE_ArrayIndexSpatialValues NeighborsOfValue(STARE_ArrayIndexSpatialValue spatialStareId);

	float64 lengthMeterScaleFromEdgeFromLevel(int level){
		return 6371.0e3*gPio2*pow(2.0,-level);
	}
	double levelFromLengthMeterScaleFromEdge(float64 lengthMeter){
		return log2((6371.0e3*gPio2)/lengthMeter);
		// return 6371.0e3*gPio2*pow(2.0,-level);
	}
	
	// uint32 tResolutionLevel() const;

// private:
	/// TODO memoize sIndex in case we need to cache multiple resolutions.
	SpatialIndex    sIndex; // The current (default) index
	std::map<int,SpatialIndex> sIndexes;

	SpatialRotation rotate_root_octahedron;
	/**
	 * Set the underlying htm index to the maximum level to keep the
	 * highest precision location information. A difference between
	 * STARE and htm is that the level corresponds to a resolution,
	 * not the level of location precision.
	 */

	/// Set the search level of the default index. Note: roundoff error corrupts calculations at level 27, e.g. area(...).
	uint64          search_level = STARE_HARDWIRED_RESOLUTION_LEVEL_MAX; /// Also known as max_level.
	uint64          build_level  = STARE_HARDWIRED_BUILD_LEVEL_MAX;  /// How deep to build the lookup table. Memory hog. Space vs. time...

	uint64 htmIDFromValue(STARE_ArrayIndexSpatialValue spatialStareId, int force_resolution_level=-1);
	STARE_ArrayIndexSpatialValue ValueFromHtmID(uint64 htmID); // * UNTESTED * //

   // Temporal

	// TODO Review these API methods and determine which should be functions not methods.

	TemporalIndex tIndex;

	double toJulianDayUTC()                   { double utc1,utc2; tIndex.toJulianUTC(utc1,utc2); return utc1+utc2; }

	TemporalIndex& setTIndexTAI(int year, int month, int day, int hour, int minute, int second, int ms, int resolution, int type);
	TemporalIndex& setTIndexUTC(int year, int month, int day, int hour, int minute, int second, int ms, int resolution, int type);

	void toTAI(int& year, int& month, int& day, int& hour, int& minute, int& second, int& ms, int& resolution, int& type);
	void toUTC(int& year, int& month, int& day, int& hour, int& minute, int& second, int& ms, int& resolution, int& type);

	double toJulianDayTAI()                   { double d1,d2; tIndex.toJulianTAI(d1, d2); return d1+d2; }
	TemporalIndex& fromJulianDayTAI(double d) { tIndex.fromJulianTAI(d, 0.0); return tIndex; }

	TemporalIndex& getTIndex() { return tIndex; }

	STARE_ArrayIndexTemporalValue getArrayIndexTemporalValue();        
	TemporalIndex& setArrayIndexTemporalValue(STARE_ArrayIndexTemporalValue temporalValue);

	bool cmpTemporalAtResolution(STARE_ArrayIndexTemporalValue temporalValue);

	double cmpSpatialDistanceCosine(STARE_ArrayIndexSpatialValue a, STARE_ArrayIndexSpatialValue b);	    
	double cmpSpatialDistanceRadians(STARE_ArrayIndexSpatialValue a, STARE_ArrayIndexSpatialValue b);
	double cmpSpatialResolutionEstimate(STARE_ArrayIndexSpatialValue a, STARE_ArrayIndexSpatialValue b);
	int cmpSpatialResolutionEstimateI(STARE_ArrayIndexSpatialValue a, STARE_ArrayIndexSpatialValue b);
	
	STARE_ArrayIndexSpatialValues adaptSpatialResolutionEstimates(STARE_ArrayIndexSpatialValues spatialStareIds);
	
    STARE_ArrayIndexTemporalValue ValueFromUTC(int year, int month, int day, int hour, int minute, int second, int ms, int resolution, int type);
    STARE_ArrayIndexTemporalValue ValueFromUTC(struct tm& tm, int resolution, int type);
    STARE_ArrayIndexTemporalValue ValueFromUTC(time_t& datetime, int resolution, int type);
    
    Datetime UTCFromValue(STARE_ArrayIndexTemporalValue temporalValue);
	

};

// int cmpSpatial(STARE_ArrayIndexTemporalValue a, STARE_ArrayIndexTemporalValue b) {}
int cmpSpatial(STARE_ArrayIndexSpatialValue a, STARE_ArrayIndexSpatialValue b);

bool cmpTemporalAtResolution2(STARE_ArrayIndexTemporalValue tv1, STARE_ArrayIndexTemporalValue tv2);
bool cmpTemporalAtResolution3(STARE_ArrayIndexTemporalValue tv1, STARE_ArrayIndexTemporalValue tv2, double days);

STARE_ArrayIndexSpatialValue sTerminator(STARE_ArrayIndexSpatialValue spatialStareId);

bool terminatorp(STARE_ArrayIndexSpatialValue spatialStareId); /// Check if the index value is a terminator.

// Deprecated... cf. SpatialRange - HstmRange SpatialRangeFromSpatialIntervals(STARE_SpatialIntervals intervals);

void STARE_ArrayIndexSpatialValues_insert(STARE_ArrayIndexSpatialValues& v,  STARE_ArrayIndexSpatialValue siv);

STARE_SpatialIntervals expandInterval(STARE_SpatialIntervals interval, int64 force_resolution = -1);
STARE_ArrayIndexSpatialValues expandIntervals(STARE_SpatialIntervals intervals, int64 force_resolution = -1);

STARE_ArrayIndexSpatialValue shiftSpatialIdAtLevel(
		STARE_ArrayIndexSpatialValue spatialStareId,
		int resolution,
		int shiftAmount
		);
		
STARE_SpatialIntervals spatialIntervalFromHtmIDKeyPair(KeyPair kp);

uint64 spatialLevelMask();

void STARE_test();
void STARE_Covers_test();

// I added this to simplify finding the library with autoconf. jhrg 5/22/19
extern "C" const char *STARE_version();

// void STARE_Temporal_test();

class STARE_Stash {
	public:
	STARE_Stash(
		const string& filename
		,int& size_of_record_
		,uint64& number_of_records_	
		,ios_base::openmode mode = ios_base::in | ios_base::binary
		,char stash_type_ = 1
		);
	void init(
		const string& filename
		,int& size_of_record_
		,uint64& number_of_records_	
		,ios_base::openmode mode
		,char stash_type_
		);
	STARE_Stash(
		const string& filename
		,STARE_SpatialIntervals& intervals
		,ios_base::openmode mode = ios_base::in | ios_base::binary
		);
		
		/*
	STARE_Stash(
		const string& filename
		,STARE_ArrayIndexSpatialValues values
		,ios_base::openmode mode = ios_base::in | ios_base::binary
		);
		*/
		
	virtual ~STARE_Stash();
	char     stash_type;
	int      size_of_record;
	uint64   number_of_records;
	ios_base::openmode current_mode; 
	fstream *stashFile;
	
	void close() { stashFile->close(); };
};

void stash_spatial(const string& filename, STARE_SpatialIntervals intervals);
void fetch_spatial(const string& filename, STARE_SpatialIntervals& intervals);


#endif /* INCLUDE_STARE_H_ */
